<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Thu Nov 13 07:30:21 NZDT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.datum.dao.mybatis.GeneralNodeDatumMetadata">

	<parameterMap id="pmap-GeneralNodeDatumMetadata" type="GeneralNodeDatumMetadata">
		<parameter property="created" jdbcType="TIMESTAMP" mode="IN"/>
		<parameter property="nodeId" jdbcType="BIGINT" mode="IN"/>
		<parameter property="sourceId" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="metaJson" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>

	<update id="insert-GeneralNodeDatumMetadata" parameterMap="pmap-GeneralNodeDatumMetadata" statementType="CALLABLE">
		{call solardatum.store_meta(?, ?, ?, ?)}
	</update>
	
	<update id="update-GeneralNodeDatumMetadata" parameterMap="pmap-GeneralNodeDatumMetadata" statementType="CALLABLE">
		{call solardatum.store_meta(?, ?, ?, ?)}
	</update>
	
	<delete id="delete-GeneralNodeDatumMetadata" parameterType="NodeSourcePK">
		DELETE FROM solardatum.da_meta
		WHERE node_id = #{nodeId} 
			AND source_id = #{sourceId}
	</delete>
	
	<sql id="fragment-GeneralNodeDatumMetadata-pk-result">
		meta.node_id AS meta_node_id,
		meta.source_id AS meta_source_id
	</sql>
	
	<sql id="fragment-GeneralNodeDatumMetadata-full-result">
		<include refid="fragment-GeneralNodeDatumMetadata-pk-result"/>,		
		meta.created AS meta_created,
		meta.updated AS meta_updated,
		meta.jdata AS meta_jdata
	</sql>
	
	<resultMap id="GeneralNodeDatumMetadataPKResult" type="NodeSourcePK">
		<id property="nodeId" column="meta_node_id"/>
		<id property="sourceId" column="meta_source_id"/>
	</resultMap>
	
	<resultMap id="GeneralNodeDatumMetadataFullResult" type="GeneralNodeDatumMetadata"
		extends="net.solarnetwork.central.datum.dao.mybatis.GeneralNodeDatumMetadata.GeneralNodeDatumMetadataPKResult">
		<id property="nodeId" column="meta_node_id"/>
		<id property="sourceId" column="meta_source_id"/>
		<id property="created" column="meta_created"/>
		<result property="updated" column="meta_updated"/>
		<result property="metaJson" column="meta_jdata"/>
	</resultMap>
	
	<select id="get-GeneralNodeDatumMetadata-for-id" parameterType="NodeSourcePK" resultMap="GeneralNodeDatumMetadataFullResult">
		SELECT
			<include refid="fragment-GeneralNodeDatumMetadata-full-result"/>
		FROM
			solardatum.da_meta meta
		WHERE
			meta.node_id = #{nodeId}
			AND meta.source_id = #{sourceId}
	</select>

	<!-- 
		FilterableDao support 
	-->

	<resultMap id="GeneralNodeDatumMetadataMatchResult" type="GeneralNodeDatumMetadataMatch" extends="net.solarnetwork.central.datum.dao.mybatis.GeneralNodeDatumMetadata.GeneralNodeDatumMetadataFullResult"/>

	<sql id="fragment-findall-GeneralNodeDatumMetadata-GeneralNodeDatumMetadataMatch-where">
		<where>
			<if test="filter.sourceIds != null and filter.sourceIds.length > 0">
				AND meta.source_id = ANY(#{filter.sourceIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.TextArrayTypeHandler})
			</if>
			<if test="filter.nodeIds != null and filter.nodeIds.length > 0">
				AND meta.node_id = ANY(#{filter.nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler})
			</if>
		</where>
	</sql>


	<select id="findall-GeneralNodeDatumMetadata-GeneralNodeDatumMetadataMatch" resultMap="GeneralNodeDatumMetadataMatchResult" fetchSize="50" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatumMetadata-full-result"/>
		FROM
			solardatum.da_meta meta
		<include refid="fragment-findall-GeneralNodeDatumMetadata-GeneralNodeDatumMetadataMatch-where"/>
		ORDER BY
		<choose>
			<when test="SortDescriptors != null and SortDescriptors.size &gt; 0">
				 <foreach collection="SortDescriptors" item="item" separator=",">
					<if test="item.sortKey == &quot;created&quot;">meta.created</if>
					<if test="item.sortKey == &quot;updated&quot;">meta.updated</if>
					<if test="item.sortKey == &quot;node&quot;">meta.node_id</if>
					<if test="item.sortKey == &quot;source&quot;">meta.source_id</if>
					<if test="item.descending">DESC</if>
				</foreach>
			</when>
			<otherwise>
				meta.source_id, meta.node_id
			</otherwise>
		</choose>
	</select>

	<select id="findall-GeneralNodeDatumMetadata-GeneralNodeDatumMetadataMatch-count" resultType="long">
		SELECT count(meta.created)
		FROM
			solardatum.da_meta meta
		<include refid="fragment-findall-GeneralNodeDatumMetadata-GeneralNodeDatumMetadataMatch-where"/>
	</select>

	<select id="find-metadata-distinct-sources" resultMap="GeneralNodeDatumMetadataPKResult">
		SELECT
			<include refid="fragment-GeneralNodeDatumMetadata-pk-result"/>
		FROM
			solardatum.find_sources_for_meta(
				#{nodeIds,jdbcType=ARRAY,typeHandler=net.solarnetwork.central.dao.mybatis.type.LongArrayTypeHandler},
				#{filter}) meta
		ORDER BY meta.node_id, meta.source_id
	</select>

</mapper>