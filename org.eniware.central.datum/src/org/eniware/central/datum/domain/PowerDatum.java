/* ==================================================================
 *  Eniware Open Source:Nikolai Manchev
 *  Apache License 2.0
 * ==================================================================
 */

package org.eniware.central.datum.domain;

/**
 * Domain object for a unit of generation data collected from a Edge.
 *
 * @version $Revision$ $Date$
 */
public class PowerDatum extends BaseEdgeDatum implements LocationDatum {

	private static final long serialVersionUID = -3789283457327334343L;

	private Long locationId = null;
	private Integer watts = null;			// watts generated by PV
	private Float batteryVolts = null;		// this is the volts on the battery
	private Float batteryAmpHours = null;	// this is the storage level in amp hours on the battery
	private Long wattHourReading = null;	// Wh today, or cumulative

	// these are for backwards compatibility only
	private Float pvVolts = null;  			// this is the volts on the PV
	private Float pvAmps = null;			// this is the current in amps from the PV

	@Override
	public String toString() {
		return "PowerDatum{EdgeId=" +getEdgeId()
			+",sourceId=" +getSourceId()
			+",watts=" +getWatts()
			+",batVolts=" +this.batteryVolts
			+",wattHourReading=" +this.wattHourReading
			+'}';
	}

	/**
	 * For backwards compatibility, this field converts the value to Wh
	 * and stores the value on the {@code wattHourReading} field.
	 * 
	 * @param wattHoursToday
	 */
	public void setKWattHoursToday(Float kWattHoursToday) {
		if ( kWattHoursToday == null ) {
			wattHourReading = null;
		} else {
			wattHourReading = Long.valueOf(Math.round(
					kWattHoursToday.doubleValue() * 1000.0));
		}
	}
	
	/**
	 * Get the watts.
	 * 
	 * <p>This will return the {@code watts} value if available, or
	 * fall back to {@code amps} * {@code volts}.<?p>
	 * 
	 * @return watts, or <em>null</em> if watts not available and 
	 * either amps or volts are null
	 */
	public Integer getWatts() {
		if ( watts != null ) {
			return watts;
		}
		if ( pvAmps == null || pvVolts == null ) {
			return null;
		}
		return Integer.valueOf((int)Math.round(
				pvAmps.doubleValue() * pvVolts.doubleValue()));
	}

	// for backwards compatibility only
	public void setPvVolts(Float pvVolts) {
		this.pvVolts = pvVolts;
	}
	
	// for backwards compatibility only
	public void setPvAmps(Float pvAmps) {
		this.pvAmps = pvAmps;
	}

	public Float getBatteryVolts() {
		return batteryVolts;
	}
	public void setBatteryVolts(Float batteryVolts) {
		this.batteryVolts = batteryVolts;
	}
	public Float getBatteryAmpHours() {
		return batteryAmpHours;
	}
	public void setBatteryAmpHours(Float batteryAmpHours) {
		this.batteryAmpHours = batteryAmpHours;
	}
	public Long getLocationId() {
		return locationId;
	}
	public void setLocationId(Long locationId) {
		this.locationId = locationId;
	}
	public Long getWattHourReading() {
		return wattHourReading;
	}
	public void setWattHourReading(Long wattHourReading) {
		this.wattHourReading = wattHourReading;
	}
	public void setWatts(Integer watts) {
		this.watts = watts;
	}

}
