<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Wed Nov 05 09:48:44 NZDT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.dao.mybatis.WeatherLocation">

	<insert id="insert-WeatherLocation" parameterType="WeatherLocation">
		<selectKey keyProperty="id" resultType="long" order="BEFORE"> 
              SELECT nextval('solarnet.solarnet_seq') AS id 
		</selectKey>
		INSERT INTO solarnet.sn_weather_loc 
			(id
			<if test="created != null">, created</if>
			, source_id, source_data, loc_id)
		VALUES
			(#{id}
			<if test="created != null">, #{created}</if>
			, #{source.id}, #{sourceData}, #{location.id})
	</insert>

	<update id="update-WeatherLocation" parameterType="WeatherLocation">
		UPDATE solarnet.sn_weather_loc SET
			source_id = #{source.id},
			source_data = #{sourceData},
			loc_id = #{location.id}
		WHERE
			id = #{id}
	</update>

	<sql id="fragment-WeatherLocation-full-result">
		wloc.id AS sn_weather_loc_id,
		wloc.created AS sn_weather_loc_created,
		wloc.source_data AS sn_weather_loc_source_data
	</sql>

	<resultMap id="WeatherLocationPublicResult" type="WeatherLocation">
		<id property="id" column="sn_weather_loc_id"/>
		<result property="created" column="sn_weather_loc_created"/>
		<result property="sourceData" column="sn_weather_loc_source_data"/>
		<association property="source" resultMap="net.solarnetwork.central.dao.mybatis.WeatherSource.WeatherSourceFullResult"/>
		<association property="location" resultMap="net.solarnetwork.central.dao.mybatis.SolarLocation.SolarLocationPublicResult"/>
	</resultMap>
	
	<resultMap id="WeatherLocationFullResult" type="WeatherLocation">
		<id property="id" column="sn_weather_loc_id"/>
		<result property="created" column="sn_weather_loc_created"/>
		<result property="sourceData" column="sn_weather_loc_source_data"/>
		<association property="source" resultMap="net.solarnetwork.central.dao.mybatis.WeatherSource.WeatherSourceFullResult"/>
		<association property="location" resultMap="net.solarnetwork.central.dao.mybatis.SolarLocation.SolarLocationFullResult"/>
	</resultMap>
	
	<select id="get-WeatherLocation-for-id" parameterType="long" resultMap="WeatherLocationFullResult">
		SELECT
			<include refid="fragment-WeatherLocation-full-result"/>,
			<include refid="net.solarnetwork.central.dao.mybatis.WeatherSource.fragment-WeatherSource-full-result"/>,
			<include refid="net.solarnetwork.central.dao.mybatis.SolarLocation.fragment-SolarLocation-full-result"/>
		FROM
			solarnet.sn_weather_loc wloc
		INNER JOIN 
			solarnet.sn_weather_source wsource ON wsource.id = wloc.source_id
		INNER JOIN
			solarnet.sn_loc l ON l.id = wloc.loc_id
		WHERE
			wloc.id = #{id}
	</select>

	<select id="get-WeatherLocation-for-name" parameterType="map" resultMap="WeatherLocationPublicResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-WeatherLocation-full-result"/>,
			<include refid="net.solarnetwork.central.dao.mybatis.WeatherSource.fragment-WeatherSource-full-result"/>,
			<include refid="net.solarnetwork.central.dao.mybatis.SolarLocation.fragment-SolarLocation-public-result"/>
		FROM
			solarnet.sn_weather_loc wloc
		INNER JOIN 
			solarnet.sn_weather_source wsource ON wsource.id = wloc.source_id
		INNER JOIN
			solarnet.sn_loc l ON l.id = wloc.loc_id
		<where>
			<if test="sourceName != null">
				wsource.sname = #{sourceName,javaType=string,jdbcType=VARCHAR}
			</if>
			<if test="filter != null">
				<if test="filter.country != null">
					AND l.country = #{filter.country,javaType=string,jdbcType=VARCHAR}
				</if>
				<if test="filter.region != null">
					AND l.region = #{filter.region,javaType=string,jdbcType=VARCHAR}
				</if>
				<if test="filter.stateOrProvince != null">
					AND l.state_prov = #{filter.stateOrProvince,javaType=string,jdbcType=VARCHAR}
				</if>
				<if test="filter.postalCode != null">
					AND l.postal_code = #{filter.postalCode,javaType=string,jdbcType=VARCHAR}
				</if>
			</if>
		</where>
		ORDER BY 
			lower(wsource.sname),
			<include refid="net.solarnetwork.central.dao.mybatis.SolarLocation.fragment-sort-SolarLocation-LocationMatch-default"/>
	</select>
	
	<sql id="fragment-findall-WeatherLocation-SourceLocationMatch">
		FROM
			solarnet.sn_weather_loc wloc
		INNER JOIN 
			solarnet.sn_weather_source wsource ON wsource.id = wloc.source_id
		INNER JOIN
			solarnet.sn_loc l ON l.id = wloc.loc_id
		<where>
			<if test="fts != null">
				AND l.fts_default @@ solarcommon.plainto_prefix_tsquery(#{fts,javaType=string,jdbcType=VARCHAR})
			</if>
			<if test="filter != null">
				<if test="filter.id != null">
					AND wloc.id = #{filter.id,javaType=long,jdbcType=BIGINT}
				</if>
				<if test="filter.source != null">
					AND wsource.fts_default @@ solarcommon.plainto_prefix_tsquery(#{filter.source,javaType=string,jdbcType=VARCHAR})
				</if>
				<if test="filter.timeZoneId != null">
					AND l.time_zone = #{filter.timeZoneId,javaType=string,jdbcType=VARCHAR}
				</if>
				<if test="filter.location != null and filter.location.timeZoneId != null">
					AND l.time_zone = #{filter.location.timeZoneId,javaType=string,jdbcType=VARCHAR}
				</if>
			</if>
		</where>
	</sql>

	<select id="findall-WeatherLocation-SourceLocationMatch" resultMap="WeatherLocationPublicResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-WeatherLocation-full-result"/>,
			<include refid="net.solarnetwork.central.dao.mybatis.WeatherSource.fragment-WeatherSource-full-result"/>,
			<include refid="net.solarnetwork.central.dao.mybatis.SolarLocation.fragment-SolarLocation-public-result"/>
		<include refid="fragment-findall-WeatherLocation-SourceLocationMatch"/>
		ORDER BY
			<if test="SortDescriptors == null">
				lower(wsource.sname),
				<include refid="net.solarnetwork.central.dao.mybatis.SolarLocation.fragment-sort-SolarLocation-LocationMatch-default"/>,
			</if>	
			<if test="SortDescriptors != null">
				<foreach collection="SortDescriptors" item="item" separator="," close=",">
					<if test="item.sortKey == &quot;created&quot;">wloc.created</if>
					<if test="item.sortKey == &quot;sourceName&quot;">lower(wsource.sname)</if>
					<if test="item.sortKey == &quot;location.country&quot;">l.country</if>
					<if test="item.sortKey == &quot;location.region&quot;">l.region</if>
					<if test="item.sortKey == &quot;location.stateOrProvince&quot;">l.state_prov</if>
					<if test="item.sortKey == &quot;location.postalCode&quot;">l.postal_code</if>
					<if test="item.sortKey == &quot;location.timeZoneId&quot;">l.time_zone</if>
					<if test="item.descending">DESC</if>
				</foreach>
			</if>
		wloc.id
	</select>

	<select id="findall-WeatherLocation-SourceLocationMatch-count" resultType="long">
		SELECT count(wloc.id)
		<include refid="fragment-findall-WeatherLocation-SourceLocationMatch"/>
	</select>

</mapper>